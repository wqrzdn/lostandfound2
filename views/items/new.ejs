<div class="container py-4">
  <!-- Page Header -->
  <div class="mb-5 text-center">
    <h1 class="fw-bold mb-3">
      <% if (typeof req !== 'undefined' && req.query.type === 'Found') { %>
        <i class="fas fa-hand-holding-heart text-success me-2"></i> Report Found Item
      <% } else if (typeof req !== 'undefined' && req.query.type === 'Lost') { %>
        <i class="fas fa-search text-danger me-2"></i> Report Lost Item
      <% } else { %>
        <i class="fas fa-plus text-primary me-2"></i> Post New Item
      <% } %>
    </h1>
    <p class="text-muted col-lg-8 mx-auto">Please fill out the form below with as much detail as possible to increase the chances of finding a match.</p>
  </div>

  <!-- Item Form -->
  <div class="row justify-content-center">
    <div class="col-lg-10">
      <div class="card shadow-sm rounded-3 border-0">
        <div class="card-body p-4 p-lg-5">
          <form action="/items" method="POST" enctype="multipart/form-data" class="needs-validation" id="postItemForm" novalidate>
            <div class="row g-4">
              <!-- Item Type -->
              <div class="col-12 mb-2">
                <label class="form-label fw-semibold">Item Type*</label>
                <div class="d-flex gap-4">
                  <div class="form-check custom-radio">
                    <input class="form-check-input" type="radio" name="type" id="typeLost" value="Lost" <%= (typeof req !== 'undefined' && req.query.type === 'Lost') ? 'checked' : '' %> required>
                    <label class="form-check-label d-flex align-items-center" for="typeLost">
                      <span class="badge bg-danger rounded-pill d-inline-flex align-items-center justify-content-center me-2" style="width: 24px; height: 24px;">
                        <i class="fas fa-search fa-sm"></i>
                      </span>
                      <span class="fw-medium">Lost Item</span>
                    </label>
                  </div>
                  <div class="form-check custom-radio">
                    <input class="form-check-input" type="radio" name="type" id="typeFound" value="Found" <%= (typeof req !== 'undefined' && req.query.type === 'Found') ? 'checked' : '' %> required>
                    <label class="form-check-label d-flex align-items-center" for="typeFound">
                      <span class="badge bg-success rounded-pill d-inline-flex align-items-center justify-content-center me-2" style="width: 24px; height: 24px;">
                        <i class="fas fa-hand-holding-heart fa-sm"></i>
                      </span>
                      <span class="fw-medium">Found Item</span>
                    </label>
                  </div>
                </div>
                <div class="invalid-feedback">Please select an item type</div>
              </div>

              <!-- Special option for School/College Area -->
              <div class="col-12 mb-4">
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" id="isSchoolArea" name="isSchoolArea" value="true">
                  <label class="form-check-label d-flex align-items-center" for="isSchoolArea">
                    <span class="badge bg-info rounded-pill d-inline-flex align-items-center justify-content-center me-2" style="width: 24px; height: 24px;">
                      <i class="fas fa-graduation-cap fa-sm"></i>
                    </span>
                    <span class="fw-medium">This is in a School/College Area</span>
                  </label>
                </div>
                <div class="form-text small ms-4 mt-1">
                  <i class="fas fa-info-circle text-info me-1"></i>
                  Check this option for a simplified reporting form for items lost or found in educational institutions
                </div>
              </div>

              <!-- School/College specific form (hidden by default) -->
              <div class="col-12 mb-4" id="schoolAreaForm" style="display: none;">
                <div class="card border-0 rounded-3 shadow-sm">
                  <div class="card-body p-4">
                    <h5 class="card-title mb-4 fw-bold">
                      <span class="icon-badge bg-info">
                        <i class="fas fa-graduation-cap"></i>
                      </span>
                      School/College Item Report
                    </h5>
                    
                    <div class="mb-3">
                      <label for="schoolName" class="form-label fw-semibold">Institution Name*</label>
                      <input type="text" class="form-control rounded-3 border-light-subtle school-input" id="schoolName" name="schoolName" placeholder="Enter school or college name">
                    </div>
                    
                    <div class="mb-3">
                      <label for="schoolLocation" class="form-label fw-semibold">Specific Location in Campus*</label>
                      <input type="text" class="form-control rounded-3 border-light-subtle school-input" id="schoolLocation" name="schoolLocation" placeholder="e.g., Library, Cafeteria, Room 101, etc.">
                    </div>
                    
                    <div class="mb-3">
                      <label for="schoolDate" class="form-label fw-semibold">Date*</label>
                      <input type="date" class="form-control rounded-3 border-light-subtle school-input" id="schoolDate" name="schoolDate" value="<%= new Date().toISOString().split('T')[0] %>">
                      <div class="form-text small mt-1"><i class="fas fa-calendar-alt text-muted me-1"></i> Date when the item was lost or found</div>
                    </div>
                    
                    <div class="mb-3">
                      <label for="schoolItemDescription" class="form-label fw-semibold">Item Description*</label>
                      <textarea class="form-control rounded-3 border-light-subtle school-input" id="schoolItemDescription" name="schoolItemDescription" rows="4" placeholder="Describe the item with as much detail as possible"></textarea>
                    </div>
                    
                    <div class="mb-3">
                      <label for="schoolContact" class="form-label fw-semibold">Contact Information*</label>
                      <div class="input-group">
                        <span class="input-group-text bg-white border-light-subtle rounded-start-3">
                          <i class="fas fa-envelope text-muted"></i>
                        </span>
                        <input type="text" class="form-control border-start-0 rounded-end-3 border-light-subtle school-input" id="schoolContact" name="schoolContact" placeholder="Your email or phone number">
                      </div>
                      <div class="form-text small mt-1"><i class="fas fa-info-circle text-muted me-1"></i> How others can reach you regarding this item</div>
                    </div>
                    
                    <div class="d-grid mt-4 gap-2">
                      <button type="submit" class="btn btn-info btn-lg rounded-pill btn-hover-lift">
                        <i class="fas fa-graduation-cap me-2"></i> Submit Report
                      </button>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Standard form fields (hidden when School/College option is selected) -->
              <div id="standardFormFields">
              <!-- Item Title -->
              <div class="col-12 mb-2">
                <label for="title" class="form-label fw-semibold">Item Title*</label>
                <input type="text" class="form-control form-control-lg rounded-3 border-light-subtle" id="title" name="title" placeholder="Brief description of the item" required>
                <div class="form-text small mt-2">
                  <i class="fas fa-lightbulb text-warning me-1"></i>
                  Example: "Blue iPhone 13 in black case" or "Gold wedding ring"
                </div>
                <div class="invalid-feedback">Please enter an item title</div>
              </div>

              <div class="col-md-6 mb-2">
                <label for="category" class="form-label fw-semibold">Category*</label>
                <select class="form-select rounded-3 border-light-subtle" id="category" name="category" required>
                  <option value="" selected disabled>Select a category</option>
                  <option value="Phone">Phone</option>
                  <option value="Wallet">Wallet</option>
                  <option value="Keys">Keys</option>
                  <option value="ID">ID</option>
                  <option value="Bag">Bag</option>
                  <option value="Jewelry">Jewelry</option>
                  <option value="Clothing">Clothing</option>
                  <option value="Electronics">Electronics</option>
                  <option value="Book">Book</option>
                  <option value="Other">Other</option>
                </select>
                <div class="invalid-feedback">Please select a category</div>
              </div>

              <!-- Date -->
              <div class="col-md-6 mb-2">
                <label for="date" class="form-label fw-semibold">Date*</label>
                <input type="date" class="form-control rounded-3 border-light-subtle" id="date" name="date" required>
                <div class="form-text small mt-1">Date when the item was lost or found</div>
                <div class="invalid-feedback">Please select a date</div>
              </div>

              <!-- Location Section -->
              <div class="col-12 mb-2">
                <div class="location-fields bg-light rounded-3 p-4 mt-3">
                  <div class="d-flex justify-content-between align-items-center mb-4">
                    <h5 class="fw-semibold mb-0">
                      <i class="fas fa-map-marker-alt me-2 text-primary"></i>Location Details*
                    </h5>
                    <button type="button" id="useMyLocation" class="btn btn-outline-primary btn-sm rounded-pill">
                      <i class="fas fa-crosshairs me-1"></i> Use My Location
                    </button>
                  </div>
                  <div class="row g-4">
                    <!-- Country -->
                    <div class="col-md-6 mb-1">
                      <label for="country" class="form-label fw-medium">Country*</label>
                      <div class="position-relative">
                        <select class="form-select rounded-3 border-light-subtle" id="country" name="country" required>
                          <option value="" selected disabled>Select a country</option>
                          <!-- Will be populated with JavaScript -->
                        </select>
                        <div class="position-absolute top-0 end-0 px-3 py-2">
                          <div class="spinner-border spinner-border-sm text-primary d-none" id="country-loading" role="status">
                            <span class="visually-hidden">Loading...</span>
                          </div>
                        </div>
                      </div>
                      <div class="invalid-feedback">Please select a country</div>
                    </div>

                    <!-- State/Province -->
                    <div class="col-md-6 mb-1">
                      <label for="state" class="form-label fw-medium">State/Province*</label>
                      <div class="position-relative">
                        <select class="form-select rounded-3 border-light-subtle" id="state" name="state" required disabled>
                          <option value="" selected disabled>Select a state/province</option>
                          <!-- Will be populated with JavaScript -->
                        </select>
                        <div class="position-absolute top-0 end-0 px-3 py-2">
                          <div class="spinner-border spinner-border-sm text-primary d-none" id="state-loading" role="status">
                            <span class="visually-hidden">Loading...</span>
                          </div>
                        </div>
                      </div>
                      <div class="invalid-feedback">Please select a state/province</div>
                    </div>

                    <!-- City -->
                    <div class="col-md-6 mb-1">
                      <div class="d-flex justify-content-between align-items-center">
                        <label for="city" class="form-label fw-medium">City*</label>
                        <button type="button" class="btn btn-sm btn-link text-decoration-none p-0" id="toggleCityInput" title="Enter city manually">
                          <i class="fas fa-pencil-alt"></i> Manual Entry
                        </button>
                      </div>
                      <div class="position-relative">
                        <select class="form-select rounded-3 border-light-subtle" id="city" name="city" required disabled>
                          <option value="" selected disabled>Select a city</option>
                          <!-- Will be populated with JavaScript -->
                        </select>
                        <div class="position-absolute top-0 end-0 px-3 py-2">
                          <div class="spinner-border spinner-border-sm text-primary d-none" id="city-loading" role="status">
                            <span class="visually-hidden">Loading...</span>
                          </div>
                        </div>
                      </div>
                      <div id="citySearchContainer" class="mt-2" style="display: none;">
                        <div class="input-group">
                          <input type="text" class="form-control rounded-start-3 border-light-subtle" id="citySearch" placeholder="Type city name...">
                          <button class="btn btn-outline-primary rounded-end-3" type="button" id="saveCitySearch">
                            <i class="fas fa-check"></i>
                          </button>
                        </div>
                        <small class="form-text text-muted">Can't find your city? Type it here</small>
                      </div>
                      <div class="invalid-feedback">Please select or enter a city</div>
                    </div>

                    <!-- Locality/Area (optional) -->
                    <div class="col-md-6 mb-1" id="localityContainer" style="display: none;">
                      <label for="locality" class="form-label fw-medium">Area/Locality</label>
                      <select class="form-select rounded-3 border-light-subtle" id="locality" name="locality" disabled>
                        <option value="" selected>Select an area (optional)</option>
                        <!-- Will be populated with JavaScript -->
                      </select>
                    </div>

                    <!-- Specific Location -->
                    <div class="col-12">
                      <label for="location" class="form-label fw-medium">Specific Location Details</label>
                      <input type="text" class="form-control rounded-3 border-light-subtle" id="location" name="location" placeholder="Specific details about the location (e.g., 'near the fountain', 'inside the library')">
                      <div class="form-text small mt-1">Add any additional details that would help locate the exact spot</div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Description -->
              <div class="col-12 mb-2">
                <label for="description" class="form-label fw-semibold">Description</label>
                <textarea class="form-control rounded-3 border-light-subtle" id="description" name="description" rows="4" placeholder="Detailed description of the item"></textarea>
                <div class="form-text small mt-1">Include identifying features, markings, contents, or any other details that might help with identification</div>
              </div>

              <!-- Images -->
              <div class="col-12 mb-2">
                <label for="images" class="form-label fw-semibold">Images (Maximum 2)</label>
                <input type="file" class="form-control rounded-3 border-light-subtle" id="images" name="images" accept="image/*" multiple>
                <div class="form-text small mt-1">
                  <i class="fas fa-image text-muted me-1"></i>
                  Upload clear images of the item (if applicable). Max file size: 5MB.
                </div>
              </div>

              <!-- Contact Information -->
              <div class="col-12 mb-2">
                <label for="contact" class="form-label fw-semibold">Contact Information*</label>
                <div class="input-group">
                  <span class="input-group-text bg-white border-light-subtle rounded-start-3">
                    <i class="fas fa-envelope text-muted"></i>
                  </span>
                  <input type="text" class="form-control border-start-0 rounded-end-3 border-light-subtle" id="contact" name="contact" placeholder="Email address or phone number" required>
                </div>
                <div class="form-text small mt-1">How others can reach you regarding this item</div>
                <div class="invalid-feedback">Please provide contact information</div>
              </div>

              <!-- Submit Button -->
              <div class="col-12 mt-4" id="standardSubmitButton">
                <hr>
                <div class="d-flex flex-column flex-sm-row gap-3 justify-content-end mt-4">
                  <a href="/items" class="btn btn-outline-secondary rounded-pill px-4 py-2">
                    <i class="fas fa-arrow-left me-2"></i> Back to Items
                  </a>
                  <button type="submit" class="btn btn-primary rounded-pill px-4 py-2">
                    <i class="fas fa-paper-plane me-2"></i> Post Item
                  </button>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Custom form styling */
  .form-control:focus,
  .form-select:focus {
    border-color: #86b7fe;
    box-shadow: 0 0 0 0.15rem rgba(13, 110, 253, 0.15);
  }
  
  /* Custom radio buttons */
  .custom-radio .form-check-input {
    width: 1.2em;
    height: 1.2em;
    margin-top: 0.15em;
  }
  
  .custom-radio .form-check-input:checked {
    background-color: #0d6efd;
    border-color: #0d6efd;
  }
  
  /* Spinner */
  .spinner-border {
    width: 1rem;
    height: 1rem;
    border-width: 0.15em;
  }
  
  /* Location fields section */
  .location-fields {
    background-color: #f8f9fa;
    transition: all 0.3s ease;
  }
</style>

<!-- Bootstrap JS Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<!-- Location Data Helper -->
<script src="/js/location-data.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // School/College area checkbox
    const isSchoolAreaCheckbox = document.getElementById('isSchoolArea');
    const schoolAreaForm = document.getElementById('schoolAreaForm');
    const standardFormFields = document.getElementById('standardFormFields');
    const standardSubmitButton = document.getElementById('standardSubmitButton');
    
    // Handle school/college area checkbox change
    if (isSchoolAreaCheckbox) {
      isSchoolAreaCheckbox.addEventListener('change', function() {
        if (this.checked) {
          // Show school form, hide standard form
          schoolAreaForm.style.display = 'block';
          standardFormFields.style.display = 'none';
          standardSubmitButton.style.display = 'none';
          
          // Make school fields required
          document.getElementById('schoolName').required = true;
          document.getElementById('schoolLocation').required = true;
          document.getElementById('schoolDate').required = true;
          document.getElementById('schoolItemDescription').required = true;
          document.getElementById('schoolContact').required = true;
          
          // Make standard fields not required
          document.getElementById('title').required = false;
          document.getElementById('category').required = false;
          document.getElementById('date').required = false;
          document.getElementById('country').required = false;
          document.getElementById('state').required = false;
          document.getElementById('city').required = false;
          document.getElementById('contact').required = false;
        } else {
          // Hide school form, show standard form
          schoolAreaForm.style.display = 'none';
          standardFormFields.style.display = 'block';
          standardSubmitButton.style.display = 'block';
          
          // Make school fields not required
          document.getElementById('schoolName').required = false;
          document.getElementById('schoolLocation').required = false;
          document.getElementById('schoolDate').required = false;
          document.getElementById('schoolItemDescription').required = false;
          document.getElementById('schoolContact').required = false;
          
          // Make standard fields required
          document.getElementById('title').required = true;
          document.getElementById('category').required = true;
          document.getElementById('date').required = true;
          document.getElementById('country').required = true;
          document.getElementById('state').required = true;
          document.getElementById('city').required = true;
          document.getElementById('contact').required = true;
        }
      });
    }
    
    // Elements
    const countrySelect = document.getElementById('country');
    const stateSelect = document.getElementById('state');
    const citySelect = document.getElementById('city');
    const localitySelect = document.getElementById('locality');
    const localityContainer = document.getElementById('localityContainer');
    const locationInput = document.getElementById('location');
    const useMyLocationBtn = document.getElementById('useMyLocation');
    
    // City search elements
    const toggleCityInputBtn = document.getElementById('toggleCityInput');
    const citySearchContainer = document.getElementById('citySearchContainer');
    const citySearchInput = document.getElementById('citySearch');
    const saveCitySearchBtn = document.getElementById('saveCitySearch');
    
    // Loading indicators
    const countryLoading = document.getElementById('country-loading');
    const stateLoading = document.getElementById('state-loading');
    const cityLoading = document.getElementById('city-loading');
    
    // Track if we're using custom city input
    let isUsingCustomCity = false;
    
    // Handle "Use My Location" button click
    if (useMyLocationBtn) {
      useMyLocationBtn.addEventListener('click', function() {
        // Disable the button while processing
        useMyLocationBtn.disabled = true;
        useMyLocationBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Detecting...';
        
        // Call the function from location-data.js
        populateLocationFromGeolocation(countrySelect, stateSelect, citySearchInput, locationInput)
          .then(locationData => {
            console.log('Location detected:', locationData);
            // Add hidden fields for coordinates if needed
            const form = document.querySelector('form');
            
            // Check if hidden fields already exist
            let latInput = document.getElementById('latitude');
            let lngInput = document.getElementById('longitude');
            
            if (!latInput) {
              latInput = document.createElement('input');
              latInput.type = 'hidden';
              latInput.id = 'latitude';
              latInput.name = 'latitude';
              form.appendChild(latInput);
            }
            
            if (!lngInput) {
              lngInput = document.createElement('input');
              lngInput.type = 'hidden';
              lngInput.id = 'longitude';
              lngInput.name = 'longitude';
              form.appendChild(lngInput);
            }
            
            // Set coordinates
            latInput.value = locationData.latitude;
            lngInput.value = locationData.longitude;
            
            // Show success message
            const successAlert = document.createElement('div');
            successAlert.className = 'alert alert-success mt-2';
            successAlert.innerHTML = '<i class="fas fa-check-circle me-2"></i> Location detected successfully!';
            successAlert.style.transition = 'opacity 0.5s';
            
            const locationFields = document.querySelector('.location-fields');
            if (locationFields) {
              locationFields.appendChild(successAlert);
              
              // Remove success message after 5 seconds
              setTimeout(() => {
                successAlert.style.opacity = '0';
                setTimeout(() => successAlert.remove(), 500);
              }, 5000);
            }
          })
          .catch(error => {
            console.error('Error detecting location:', error);
          })
          .finally(() => {
            // Re-enable the button
            useMyLocationBtn.disabled = false;
            useMyLocationBtn.innerHTML = '<i class="fas fa-crosshairs me-1"></i> Use My Location';
          });
      });
    }
    
    // Toggle between dropdown and search input for city
    toggleCityInputBtn.addEventListener('click', function() {
      isUsingCustomCity = !isUsingCustomCity;
      citySearchContainer.style.display = isUsingCustomCity ? 'block' : 'none';
      
      if (isUsingCustomCity) {
        // Focus the search input when shown
        citySearchInput.focus();
        toggleCityInputBtn.innerHTML = '<i class="fas fa-list"></i> Use Dropdown';
      } else {
        toggleCityInputBtn.innerHTML = '<i class="fas fa-pencil-alt"></i> Manual Entry';
      }
    });
    
    // Save the custom city input
    saveCitySearchBtn.addEventListener('click', function() {
      const cityName = citySearchInput.value.trim();
      if (cityName) {
        // Clear existing options and add the custom city
        citySelect.innerHTML = '';
        
        const defaultOption = document.createElement('option');
        defaultOption.value = "";
        defaultOption.textContent = "Select a city";
        defaultOption.disabled = true;
        citySelect.appendChild(defaultOption);
        
        const customOption = document.createElement('option');
        customOption.value = cityName;
        customOption.textContent = cityName;
        customOption.selected = true;
        citySelect.appendChild(customOption);
        
        // Hide the search container after saving
        citySearchContainer.style.display = 'none';
        isUsingCustomCity = false;
        toggleCityInputBtn.innerHTML = '<i class="fas fa-pencil-alt"></i> Manual Entry';
        
        // Enable the select
        citySelect.disabled = false;
      }
    });
    
    // Also save city on enter key
    citySearchInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault(); // Prevent form submission
        saveCitySearchBtn.click();
      }
    });
    
    // Enhanced loading indicators
    function showLoading(element) {
      if (element === countrySelect) countryLoading.classList.remove('d-none');
      if (element === stateSelect) stateLoading.classList.remove('d-none');
      if (element === citySelect) cityLoading.classList.remove('d-none');
      element.disabled = true;
    }
    
    function hideLoading(element) {
      if (element === countrySelect) countryLoading.classList.add('d-none');
      if (element === stateSelect) stateLoading.classList.add('d-none');
      if (element === citySelect) cityLoading.classList.add('d-none');
      element.disabled = false;
    }
    
    // Fetch countries on page load
    async function fetchCountries() {
      try {
        showLoading(countrySelect);
        
        try {
          // First try to fetch from API
          const response = await fetch('/api/countries');
          const countries = await response.json();
          
          if (countries && countries.length > 0) {
            countries.forEach(country => {
              const option = document.createElement('option');
              option.value = country.name;
              option.dataset.code = country.code;
              option.textContent = country.name;
              countrySelect.appendChild(option);
            });
          } else {
            // If API returns empty, use local data
            populateCountries(countrySelect);
          }
        } catch (apiError) {
          console.warn('API fetch failed, using local data:', apiError);
          // Use local data as fallback
          populateCountries(countrySelect);
        }
        
        hideLoading(countrySelect);
      } catch (error) {
        console.error('Error loading countries:', error);
        countrySelect.innerHTML += '<option value="" disabled>Error loading countries</option>';
        hideLoading(countrySelect);
      }
    }
    
    // Fetch states when country is selected
    countrySelect.addEventListener('change', async function() {
      stateSelect.innerHTML = '<option value="" selected disabled>Select a state/province</option>';
      citySelect.innerHTML = '<option value="" selected disabled>Select a city</option>';
      
      stateSelect.disabled = true;
      citySelect.disabled = true;
      
      const selectedOption = this.options[this.selectedIndex];
      const countryCode = selectedOption.dataset.code;
      
      try {
        showLoading(stateSelect);
        
        try {
          // First try to fetch from API
          const response = await fetch(`/api/states/${countryCode}`);
          const states = await response.json();
          
          if (states && states.length > 0) {
            states.forEach(state => {
              const option = document.createElement('option');
              option.value = state.name;
              option.dataset.code = state.code || '';
              option.textContent = state.name;
              stateSelect.appendChild(option);
            });
          } else {
            // If API returns empty, use local data
            populateStates(stateSelect, countryCode);
          }
        } catch (apiError) {
          console.warn('API fetch failed, using local data:', apiError);
          // Use local data as fallback
          populateStates(stateSelect, countryCode);
        }
        
        // Enable the state select if it has options
        const hasOptions = stateSelect.options.length > 1;
        stateSelect.disabled = !hasOptions;
        
        hideLoading(stateSelect);
        
        // Show the toggle city input button for manual entry
        toggleCityInputBtn.style.display = 'block';
      } catch (error) {
        console.error('Error loading states:', error);
        stateSelect.innerHTML += '<option value="" disabled>Error loading states</option>';
        hideLoading(stateSelect);
      }
    });
    
    // Fetch cities when state is selected
    stateSelect.addEventListener('change', async function() {
      citySelect.innerHTML = '<option value="" selected disabled>Select a city</option>';
      citySelect.disabled = true;
      
      const countryOption = countrySelect.options[countrySelect.selectedIndex];
      const stateOption = this.options[this.selectedIndex];
      
      const countryCode = countryOption.dataset.code;
      const stateCode = stateOption.dataset.code;
      
      try {
        showLoading(citySelect);
        const response = await fetch(`/api/cities/${countryCode}/${stateCode}`);
        const cities = await response.json();
        
        cities.forEach(city => {
          const option = document.createElement('option');
          option.value = city.name;
          option.textContent = city.name;
          citySelect.appendChild(option);
        });
        
        citySelect.disabled = cities.length === 0;
        hideLoading(citySelect);
      } catch (error) {
        console.error('Error loading cities:', error);
        citySelect.innerHTML += '<option value="" disabled>Error loading cities</option>';
        hideLoading(citySelect);
      }
    });
    
    // Simple form validation
    const form = document.getElementById('postItemForm');
    if (form) {
      console.log('Form found:', form.action, form.method);
      
      // Basic Bootstrap form validation
      form.addEventListener('submit', function(event) {
        console.log('Form submit event triggered');
        
        if (!form.checkValidity()) {
          event.preventDefault();
          event.stopPropagation();
          console.log('Form validation failed');
          
          // Show which fields are invalid
          const invalidFields = form.querySelectorAll(':invalid');
          console.log('Invalid fields:', invalidFields.length);
          invalidFields.forEach(field => {
            console.log(`Invalid field: ${field.name || field.id}`);
          });
        } else {
          console.log('Form is valid, submitting...');
          // Log form data for debugging
          const formData = new FormData(form);
          for (let [key, value] of formData.entries()) {
            console.log(`${key}: ${value}`);
          }
        }
        
        form.classList.add('was-validated');
      });
    } else {
      console.error('Form not found in the document');
    }
    
    // Initialize
    fetchCountries();
  });
</script> 